
grf{
	grfid: "\57\48\10\37";
	name: string(STR_GRF_NAME);
	desc: string(STR_GRF_DESC);
	version:1;
	min_compatible_version:0;
}

train_width_32_px  = 1;
traininfo_y_offset = 2;

cargotable {
//Default cargos
	PASS, MAIL, COAL, FOOD, GOLD, GOOD, GRAI, IORE, LVST, OIL_, PAPR, STEL, VALU, WHEA, WOOD,

//Tropical cargos
	CORE, DIAM, FRUT, MAIZ, RUBR, WATR, 

//ECS
	AORE, BDMT, BRCK, CERA, CERE, CMNT, DYES, FERT, FICR, FISH, GLAS, LIME, OLSD, PETR, PLAS, POTA, RFPR, SAND, SULP, TOUR, VEHI, WDPR, WOOL, 
   
//FIRS
	BEAN, BEER, BOOM, CLAY, CASS, COKE, ENSP, EOIL, FMSP, FRVG, GRVL, IRON, METL, MNO2, MILK, MNSP, NICK, NITR, NUTS, PHOS, PIPE, PORE, QLME, RCYC, SASH, SCMT, SGBT, SGCN, SLAG, VBOD, VPTS, JAVA, COPR, SUGR, ZINC, KAOL, TWOD,
   
	SCRP, //Old scrap metal
   
//Nuclear stuff
	URAN, NWST
}


railtypetable {
    "SAAN", "RAIL", "SAAE", "ELRL", "SAA3", "3RDR", "SAAZ", "SAA4", "4RDR", 
	RAIL: [SAAN, RAIL],
	ELRL: [SAAA, SAAE, ELRL],
	SAA3: [SAA3, "3RDR", ELRL],
	SAAZ: [SAAZ, "3RDC", ELRL],
	SAA4: [SAA4, "4RDR", "3RDR", SAA3, ELRL]
}


/* TEMPLATE_<length>_<number of views>_<A or B end first>

	Sprites should be aligned on a grid system.
	Starting from 0, this will for simple referencing of sprite sheets.
	Fourth Row Third Column, X=2 y=3, X of 500 and a Y of 120.

*/



template TEMPLATE_8_8_A(x,y){
	[x*250,		y*40,	12,	30,		-5,		-17,	ANIM]	// NORTH	
	[x*250+16,	y*40,	26,	24,		-16,	-15,	ANIM]	// NORTH EAST
	[x*250+46,	y*40,	37,	22,		-19,	-17,	ANIM]	// EAST
	[x*250+87,	y*40,	26,	24,		-8,		-15,	ANIM]	// SOUTH EAST
	[x*250+117,	y*40,	12,	30,		-5,		-17,	ANIM]	// SOUTH
	[x*250+133,	y*40,	26,	24,		-16,	-15,	ANIM]	// SOUTH WEST
	[x*250+163,	y*40,	37,	22,		-19,	-17,	ANIM]	// WEST
	[x*250+204,	y*40,	26,	24,		-8,		-15,	ANIM]	// NORTH WEST
}
template TEMPLATE_8_8_B(x,y){
	[x*250+117,	y*40,	12,	30,		-5,		-17,	ANIM]	// NORTH	
	[x*250+133,	y*40,	26,	24,		-16,	-15,	ANIM]	// NORTH EAST
	[x*250+163,	y*40,	37,	22,		-19,	-17,	ANIM]	// EAST
	[x*250+204,	y*40,	26,	24,		-8,		-15,	ANIM]	// SOUTH EAST
	[x*250,		y*40,	12,	30,		-5,		-17,	ANIM]	// SOUTH
	[x*250+16,	y*40,	26,	24,		-16,	-15,	ANIM]	// SOUTH WEST
	[x*250+46,	y*40,	37,	22,		-19,	-17,	ANIM]	// WEST
	[x*250+87,	y*40,	26,	24,		-8,		-15,	ANIM]	// NORTH WEST
}

template TEMPLATE_8_4(x,y){
	[x*250,		y*40,	12,	30,		-5,		-17,	ANIM]	// NORTH	
	[x*250+16,	y*40,	26,	24,		-16,	-15,	ANIM]	// NORTH EAST
	[x*250+46,	y*40,	37,	22,		-19,	-17,	ANIM]	// EAST
	[x*250+87,	y*40,	26,	24,		-8,		-15,	ANIM]	// SOUTH EAST
	[x*250,		y*40,	12,	30,		-5,		-17,	ANIM]	// SOUTH
	[x*250+16,	y*40,	26,	24,		-16,	-15,	ANIM]	// SOUTH WEST
	[x*250+46,	y*40,	37,	22,		-19,	-17,	ANIM]	// WEST
	[x*250+87,	y*40,	26,	24,		-8,		-15,	ANIM]	// NORTH WEST
}



template TEMPLATE_7_8_A(x,y){
	[x*250,		y*40,	12,	30,		-5,		-19,	ANIM]	// NORTH	
	[x*250+16,	y*40,	26,	24,		-14,	-16,	ANIM]	// NORTH EAST
	[x*250+46,	y*40,	37,	22,		-15,	-17,	ANIM]	// EAST
	[x*250+87,	y*40,	26,	24,		-8,		-15,	ANIM]	// SOUTH EAST
	[x*250+117,	y*40,	12,	30,		-5,		-17,	ANIM]	// SOUTH
	[x*250+133,	y*40,	26,	24,		-16,	-15,	ANIM]	// SOUTH WEST
	[x*250+163,	y*40,	37,	22,		-19,	-17,	ANIM]	// WEST
	[x*250+204,	y*40,	26,	24,		-10,	-16,	ANIM]	// NORTH WEST
}
template TEMPLATE_7_8_B(x,y){
	[x*250+117,	y*40,	12,	30,		-5,		-19,	ANIM]	// NORTH	
	[x*250+133,	y*40,	26,	24,		-14,	-16,	ANIM]	// NORTH EAST
	[x*250+163,	y*40,	37,	22,		-15,	-17,	ANIM]	// EAST
	[x*250+204,	y*40,	26,	24,		-8,		-15,	ANIM]	// SOUTH EAST
	[x*250,		y*40,	12,	30,		-5,		-17,	ANIM]	// SOUTH
	[x*250+16,	y*40,	26,	24,		-16,	-15,	ANIM]	// SOUTH WEST
	[x*250+46,	y*40,	37,	22,		-19,	-17,	ANIM]	// WEST
	[x*250+87,	y*40,	26,	24,		-10,	-16,	ANIM]	// NORTH WEST
}

template TEMPLATE_7_4(x,y){
	[x*250,		y*40,	12,	30,		-5,		-19,	ANIM]	// NORTH	
	[x*250+16,	y*40,	26,	24,		-14,	-16,	ANIM]	// NORTH EAST
	[x*250+46,	y*40,	37,	22,		-15,	-17,	ANIM]	// EAST
	[x*250+87,	y*40,	26,	24,		-8,		-15,	ANIM]	// SOUTH EAST
	[x*250,		y*40,	12,	30,		-5,		-17,	ANIM]	// SOUTH
	[x*250+16,	y*40,	26,	24,		-16,	-15,	ANIM]	// SOUTH WEST
	[x*250+46,	y*40,	37,	22,		-19,	-17,	ANIM]	// WEST
	[x*250+87,	y*40,	26,	24,		-10,	-16,	ANIM]	// NORTH WEST
}



template TEMPLATE_6_8_A(x,y){
	[x*250,		y*40,	12,	30,		-5,		-21,	ANIM]	// NORTH	
	[x*250+16,	y*40,	26,	24,		-12,	-17,	ANIM]	// NORTH EAST
	[x*250+46,	y*40,	37,	22,		-11,	-17,	ANIM]	// EAST
	[x*250+87,	y*40,	26,	24,		-8,		-15,	ANIM]	// SOUTH EAST
	[x*250+117,	y*40,	12,	30,		-5,		-17,	ANIM]	// SOUTH
	[x*250+133,	y*40,	26,	24,		-16,	-15,	ANIM]	// SOUTH WEST
	[x*250+163,	y*40,	37,	22,		-19,	-17,	ANIM]	// WEST
	[x*250+204,	y*40,	26,	24,		-12,	-17,	ANIM]	// NORTH WEST
}
template TEMPLATE_6_8_B(x,y){
	[x*250+117,	y*40,	12,	30,		-5,		-21,	ANIM]	// NORTH	
	[x*250+133,	y*40,	26,	24,		-12,	-17,	ANIM]	// NORTH EAST
	[x*250+163,	y*40,	37,	22,		-11,	-17,	ANIM]	// EAST
	[x*250+204,	y*40,	26,	24,		-8,		-15,	ANIM]	// SOUTH EAST
	[x*250,		y*40,	12,	30,		-5,		-17,	ANIM]	// SOUTH
	[x*250+16,	y*40,	26,	24,		-16,	-15,	ANIM]	// SOUTH WEST
	[x*250+46,	y*40,	37,	22,		-19,	-17,	ANIM]	// WEST
	[x*250+87,	y*40,	26,	24,		-12,	-17,	ANIM]	// NORTH WEST
}

template TEMPLATE_6_4(x,y){
	[x*250,		y*40,	12,	30,		-5,		-21,	ANIM]	// NORTH	
	[x*250+16,	y*40,	26,	24,		-12,	-17,	ANIM]	// NORTH EAST
	[x*250+46,	y*40,	37,	22,		-11,	-17,	ANIM]	// EAST
	[x*250+87,	y*40,	26,	24,		-8,		-15,	ANIM]	// SOUTH EAST
	[x*250,		y*40,	12,	30,		-5,		-17,	ANIM]	// SOUTH
	[x*250+16,	y*40,	26,	24,		-16,	-15,	ANIM]	// SOUTH WEST
	[x*250+46,	y*40,	37,	22,		-19,	-17,	ANIM]	// WEST
	[x*250+87,	y*40,	26,	24,		-12,	-17,	ANIM]	// NORTH WEST
}



template TEMPLATE_5_8_A(x,y){
	[x*250,		y*40,	12,	30,		-5,		-23,	ANIM]	// NORTH	
	[x*250+16,	y*40,	26,	24,		-10,	-18,	ANIM]	// NORTH EAST
	[x*250+46,	y*40,	37,	22,		-7,		-17,	ANIM]	// EAST
	[x*250+87,	y*40,	26,	24,		-8,		-15,	ANIM]	// SOUTH EAST
	[x*250+117,	y*40,	12,	30,		-5,		-17,	ANIM]	// SOUTH
	[x*250+133,	y*40,	26,	24,		-16,	-15,	ANIM]	// SOUTH WEST
	[x*250+163,	y*40,	37,	22,		-19,	-17,	ANIM]	// WEST
	[x*250+204,	y*40,	26,	24,		-14,	-18,	ANIM]	// NORTH WEST
}
template TEMPLATE_5_8_B(x,y){
	[x*250+117,	y*40,	12,	30,		-5,		-23,	ANIM]	// NORTH	
	[x*250+133,	y*40,	26,	24,		-10,	-18,	ANIM]	// NORTH EAST
	[x*250+163,	y*40,	37,	22,		-7,		-17,	ANIM]	// EAST
	[x*250+204,	y*40,	26,	24,		-8,		-15,	ANIM]	// SOUTH EAST
	[x*250,		y*40,	12,	30,		-5,		-17,	ANIM]	// SOUTH
	[x*250+16,	y*40,	26,	24,		-16,	-15,	ANIM]	// SOUTH WEST
	[x*250+46,	y*40,	37,	22,		-19,	-17,	ANIM]	// WEST
	[x*250+87,	y*40,	26,	24,		-14,	-18,	ANIM]	// NORTH WEST
}

template TEMPLATE_5_4(x,y){
	[x*250,		y*40,	12,	30,		-5,		-23,	ANIM]	// NORTH	
	[x*250+16,	y*40,	26,	24,		-10,	-18,	ANIM]	// NORTH EAST
	[x*250+46,	y*40,	37,	22,		-7,		-17,	ANIM]	// EAST
	[x*250+87,	y*40,	26,	24,		-8,		-15,	ANIM]	// SOUTH EAST
	[x*250,		y*40,	12,	30,		-5,		-17,	ANIM]	// SOUTH
	[x*250+16,	y*40,	26,	24,		-16,	-15,	ANIM]	// SOUTH WEST
	[x*250+46,	y*40,	37,	22,		-19,	-17,	ANIM]	// WEST
	[x*250+87,	y*40,	26,	24,		-14,	-18,	ANIM]	// NORTH WEST
}



template TEMPLATE_4_8_A(x,y){
	[x*250,		y*40,	12,	30,		-5,		-25,	ANIM]	// NORTH	
	[x*250+16,	y*40,	26,	24,		-8,		-19,	ANIM]	// NORTH EAST
	[x*250+46,	y*40,	37,	22,		-3,		-17,	ANIM]	// EAST
	[x*250+87,	y*40,	26,	24,		-8,		-15,	ANIM]	// SOUTH EAST
	[x*250+117,	y*40,	12,	30,		-5,		-17,	ANIM]	// SOUTH
	[x*250+133,	y*40,	26,	24,		-16,	-15,	ANIM]	// SOUTH WEST
	[x*250+163,	y*40,	37,	22,		-19,	-17,	ANIM]	// WEST
	[x*250+204,	y*40,	26,	24,		-16,	-19,	ANIM]	// NORTH WEST
}
template TEMPLATE_4_8_B(x,y){
	[x*250+117,	y*40,	12,	30,		-5,		-25,	ANIM]	// NORTH	
	[x*250+133,	y*40,	26,	24,		-8,		-19,	ANIM]	// NORTH EAST
	[x*250+163,	y*40,	37,	22,		-3,		-17,	ANIM]	// EAST
	[x*250+204,	y*40,	26,	24,		-8,		-15,	ANIM]	// SOUTH EAST
	[x*250,		y*40,	12,	30,		-5,		-17,	ANIM]	// SOUTH
	[x*250+16,	y*40,	26,	24,		-16,	-15,	ANIM]	// SOUTH WEST
	[x*250+46,	y*40,	37,	22,		-19,	-17,	ANIM]	// WEST
	[x*250+87,	y*40,	26,	24,		-16,	-19,	ANIM]	// NORTH WEST
}

template TEMPLATE_4_4(x,y){
	[x*250,		y*40,	12,	30,		-5,		-25,	ANIM]	// NORTH	
	[x*250+16,	y*40,	26,	24,		-8,		-19,	ANIM]	// NORTH EAST
	[x*250+46,	y*40,	37,	22,		-3,		-17,	ANIM]	// EAST
	[x*250+87,	y*40,	26,	24,		-8,		-15,	ANIM]	// SOUTH EAST
	[x*250,		y*40,	12,	30,		-5,		-17,	ANIM]	// SOUTH
	[x*250+16,	y*40,	26,	24,		-16,	-15,	ANIM]	// SOUTH WEST
	[x*250+46,	y*40,	37,	22,		-19,	-17,	ANIM]	// WEST
	[x*250+87,	y*40,	26,	24,		-16,	-19,	ANIM]	// NORTH WEST
}



template TEMPLATE_3_8_A(x,y){
	[x*250,		y*40,	12,	30,		-5,		-27,	ANIM]	// NORTH	
	[x*250+16,	y*40,	26,	24,		-6,		-20,	ANIM]	// NORTH EAST
	[x*250+46,	y*40,	37,	22,		1,		-17,	ANIM]	// EAST
	[x*250+87,	y*40,	26,	24,		-8,		-15,	ANIM]	// SOUTH EAST
	[x*250+117,	y*40,	12,	30,		-5,		-17,	ANIM]	// SOUTH
	[x*250+133,	y*40,	26,	24,		-16,	-15,	ANIM]	// SOUTH WEST
	[x*250+163,	y*40,	37,	22,		-19,	-17,	ANIM]	// WEST
	[x*250+204,	y*40,	26,	24,		-18,	-20,	ANIM]	// NORTH WEST
}
template TEMPLATE_3_8_B(x,y){
	[x*250+117,	y*40,	12,	30,		-5,		-27,	ANIM]	// NORTH	
	[x*250+133,	y*40,	26,	24,		-6,		-20,	ANIM]	// NORTH EAST
	[x*250+163,	y*40,	37,	22,		1,		-17,	ANIM]	// EAST
	[x*250+204,	y*40,	26,	24,		-8,		-15,	ANIM]	// SOUTH EAST
	[x*250,		y*40,	12,	30,		-5,		-17,	ANIM]	// SOUTH
	[x*250+16,	y*40,	26,	24,		-16,	-15,	ANIM]	// SOUTH WEST
	[x*250+46,	y*40,	37,	22,		-19,	-17,	ANIM]	// WEST
	[x*250+87,	y*40,	26,	24,		-18,	-20,	ANIM]	// NORTH WEST
}

template TEMPLATE_3_4(x,y){
	[x*250,		y*40,	12,	30,		-5,		-27,	ANIM]	// NORTH	
	[x*250+16,	y*40,	26,	24,		-6,		-20,	ANIM]	// NORTH EAST
	[x*250+46,	y*40,	37,	22,		1,		-17,	ANIM]	// EAST
	[x*250+87,	y*40,	26,	24,		-8,		-15,	ANIM]	// SOUTH EAST
	[x*250,		y*40,	12,	30,		-5,		-17,	ANIM]	// SOUTH
	[x*250+16,	y*40,	26,	24,		-16,	-15,	ANIM]	// SOUTH WEST
	[x*250+46,	y*40,	37,	22,		-19,	-17,	ANIM]	// WEST
	[x*250+87,	y*40,	26,	24,		-18,	-20,	ANIM]	// NORTH WEST
}



template TEMPLATE_2_8_A(x,y){
	[x*250,		y*40,	12,	30,		-5,		-29,	ANIM]	// NORTH	
	[x*250+16,	y*40,	26,	24,		-4,		-21,	ANIM]	// NORTH EAST
	[x*250+46,	y*40,	37,	22,		5,		-17,	ANIM]	// EAST
	[x*250+87,	y*40,	26,	24,		-8,		-15,	ANIM]	// SOUTH EAST
	[x*250+117,	y*40,	12,	30,		-5,		-17,	ANIM]	// SOUTH
	[x*250+133,	y*40,	26,	24,		-16,	-15,	ANIM]	// SOUTH WEST
	[x*250+163,	y*40,	37,	22,		-19,	-17,	ANIM]	// WEST
	[x*250+204,	y*40,	26,	24,		-20,	-21,	ANIM]	// NORTH WEST
}
template TEMPLATE_2_8_B(x,y){
	[x*250+117,	y*40,	12,	30,		-5,		-29,	ANIM]	// NORTH	
	[x*250+133,	y*40,	26,	24,		-4,		-21,	ANIM]	// NORTH EAST
	[x*250+163,	y*40,	37,	22,		5,		-17,	ANIM]	// EAST
	[x*250+204,	y*40,	26,	24,		-8,		-15,	ANIM]	// SOUTH EAST
	[x*250,		y*40,	12,	30,		-5,		-17,	ANIM]	// SOUTH
	[x*250+16,	y*40,	26,	24,		-16,	-15,	ANIM]	// SOUTH WEST
	[x*250+46,	y*40,	37,	22,		-19,	-17,	ANIM]	// WEST
	[x*250+87,	y*40,	26,	24,		-20,	-21,	ANIM]	// NORTH WEST
}

template TEMPLATE_2_4(x,y){
	[x*250,		y*40,	12,	30,		-5,		-29,	ANIM]	// NORTH	
	[x*250+16,	y*40,	26,	24,		-4,		-21,	ANIM]	// NORTH EAST
	[x*250+46,	y*40,	37,	22,		5,		-17,	ANIM]	// EAST
	[x*250+87,	y*40,	26,	24,		-8,		-15,	ANIM]	// SOUTH EAST
	[x*250,		y*40,	12,	30,		-5,		-17,	ANIM]	// SOUTH
	[x*250+16,	y*40,	26,	24,		-16,	-15,	ANIM]	// SOUTH WEST
	[x*250+46,	y*40,	37,	22,		-19,	-17,	ANIM]	// WEST
	[x*250+87,	y*40,	26,	24,		-20,	-21,	ANIM]	// NORTH WEST
}



template TEMPLATE_1_8_A(x,y){
	[x*250,		y*40,	12,	30,		-5,		-31,	ANIM]	// NORTH	
	[x*250+16,	y*40,	26,	24,		-2,		-22,	ANIM]	// NORTH EAST
	[x*250+46,	y*40,	37,	22,		9,		-17,	ANIM]	// EAST
	[x*250+87,	y*40,	26,	24,		-8,		-15,	ANIM]	// SOUTH EAST
	[x*250+117,	y*40,	12,	30,		-5,		-17,	ANIM]	// SOUTH
	[x*250+133,	y*40,	26,	24,		-16,	-15,	ANIM]	// SOUTH WEST
	[x*250+163,	y*40,	37,	22,		-19,	-17,	ANIM]	// WEST
	[x*250+204,	y*40,	26,	24,		-22,		-22,	ANIM]	// NORTH WEST
}
template TEMPLATE_1_8_B(x,y){
	[x*250+117,	y*40,	12,	30,		-5,		-31,	ANIM]	// NORTH	
	[x*250+133,	y*40,	26,	24,		-2,		-22,	ANIM]	// NORTH EAST
	[x*250+163,	y*40,	37,	22,		9,		-17,	ANIM]	// EAST
	[x*250+204,	y*40,	26,	24,		-8,		-15,	ANIM]	// SOUTH EAST
	[x*250,		y*40,	12,	30,		-5,		-17,	ANIM]	// SOUTH
	[x*250+16,	y*40,	26,	24,		-16,	-15,	ANIM]	// SOUTH WEST
	[x*250+46,	y*40,	37,	22,		-19,	-17,	ANIM]	// WEST
	[x*250+87,	y*40,	26,	24,		-22,	-22,	ANIM]	// NORTH WEST
}

template TEMPLATE_1_4(x,y){
	[x*250,		y*40,	12,	30,		-5,		-31,	ANIM]	// NORTH	
	[x*250+16,	y*40,	26,	24,		-2,		-22,	ANIM]	// NORTH EAST
	[x*250+46,	y*40,	37,	22,		9,		-17,	ANIM]	// EAST
	[x*250+87,	y*40,	26,	24,		-8,		-15,	ANIM]	// SOUTH EAST
	[x*250,		y*40,	12,	30,		-5,		-17,	ANIM]	// SOUTH
	[x*250+16,	y*40,	26,	24,		-16,	-15,	ANIM]	// SOUTH WEST
	[x*250+46,	y*40,	37,	22,		-19,	-17,	ANIM]	// WEST
	[x*250+87,	y*40,	26,	24,		-22,	-22,	ANIM]	// NORTH WEST
}



/*	SPRITE_<train model name>_<type>_<up to 5 letter livery>_<A or B end first>

	Even though we're going to have our code generated by python, we want it to still be human readable

	model:
		
		NON-TOPS:
		
			Company followed by model name or number, followed by variant if applicable
			Steam: e.g. LMSBLACK5, LBSCRE1
			Metro: e.g. LU1973, TWMETRO_1
			Wagon: e.g. TEATANK, MARK3_1 
		
		TOPS:
		
			Simply CL followed by number and subclass (if needed)
			e.g.  CL508, CL08, CL37_7
			
	types:	
		
		LOCO locomotive, WAGN any other trailing vehicle, LIGH head or tail lights, PANT pantograph, STCK other sprite stack
		MURT multiple unit root, MUXX multiple unit generic trailer, MU01 MU02 MU03 etc for specific parts of an MU
			
*/
	


spriteset(SPRITE_TEST_LOCO_BASE_A, "templates/lengths.png"){TEMPLATE_2_8_A(0,6)}
spriteset(SPRITE_TEST_LOCO_BASE_B, "templates/lengths.png"){TEMPLATE_2_8_B(0,6)}
spriteset(SPRITE_TEST_LOCO_BASE_C, "templates/lengths.png"){TEMPLATE_2_4(0,6)}



switch(FEAT_TRAINS,PARENT,SW_TEST_LOCO_BASE,vehicle_is_reversed){0:SPRITE_TEST_LOCO_BASE_A;SPRITE_TEST_LOCO_BASE_B;}
switch(FEAT_TRAINS,SELF,SW_TEST_LOCO_LIVERY,cargo_subtype){0:SW_TEST_LOCO_BASE;SPRITE_TEST_LOCO_BASE_C;}
switch(FEAT_TRAINS,SELF,SW_TEST_LOCO_TEXT,cargo_subtype){0:string(STR_GRF_NAME);1:string(STR_GRF_DESC);CB_RESULT_NO_TEXT;}

/*	
	
	IDs:	maximum is 65535
	
	nvm can't use this, but use something similar
	
			NXYYZ
			N = Type (0=TOPS class, 1 = TOPS MU part, 2 = steam loco, 3 = tender, 4 = coach or wagon, 5 = pre-tops diesel/electric loco & MUs, 6 = Non National Rail vehicles, donut use 7+)
			
			TOPS:
				XYY = tops class, Z = subclass
			
			Steam loco + Tender:
				X = company/era
				YY = unique identifier taken from class/arbitrarily assigned number
				Z = variant
				
			Coach/wagon:
				XYY = arbitrarily assigned number
				Z = variant
				
			Pre tops:
				XYY = unique identifier taken from class/arbitrarily assigned number
				Z = variant or MU part
				
			Non National Rail:
				X = Location (0 = London, 1 = Liverpool/Manchester, 2 = Scotland, 4 = Other)
				YY = unique identifier taken from class/arbitrarily assigned number
				Z = variant or MU part
			
			N = Position in consist (max 5, but we should rarely go above 1)
			X = Overarching type (0xx,1xx,2xx,3xx,4xx,5xx,7xx,8xx = third TOPS digit, 5 = wagons)
			YY = last two digits of class number
			Z = subclass for tops
			
			examples:
			
			00372 - class 37 centre headcode
			13774 - class 377/4 trailer 1
			26350 - Merchant Navy class
			36351 - Tender for Merchant Navy Rebuild
			62031 - New glasgow subway MU part

*/

switch(FEAT_TRAINS,SELF,SW_TEST_LOCO_ARTPART, extra_callback_info1){
	1..3:ITEM_TEST;
	return CB_RESULT_NO_MORE_ARTICULATED_PARTS;
}


item (FEAT_TRAINS, ITEM_TEST, 6400){
	property{
		name:							string(STR_TEMP);
		climates_available:				ALL_CLIMATES;
		introduction_date:				date(1,1,1);
		cargo_allow_refit:				[MAIL];
		cargo_capacity:					1;
		model_life:						VEHICLE_NEVER_EXPIRES;
		vehicle_life:					100;
		reliability_decay:				1;
		cost_factor:					1;
		running_cost_base:				1;
		running_cost_factor:			1;	
		speed:							200 mph;
		track_type:						RAIL;
		power:							100 kW;
		weight:							100 ton;
		engine_class:					ENGINE_CLASS_DIESEL;
		tractive_effort_coefficient:	0.4;			
		air_drag_coefficient:			0.1;	
		length:							2;
		sprite_id:						SPRITE_ID_NEW_TRAIN;
	}
	graphics{
		default:SW_TEST_LOCO_LIVERY;
		cargo_subtype_text:SW_TEST_LOCO_TEXT;
		cargo_capacity:return 40;
		articulated_part:SW_TEST_LOCO_ARTPART;
	}
}







